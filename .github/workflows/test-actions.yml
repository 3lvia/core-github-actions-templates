name: Test actions

on:
  pull_request:
    branches: [trunk]
  workflow_dispatch:
    inputs:
      runner:
        description: 'Runner'
        required: true
        default: 'elvia-runner'
        type: 'choice'
        options:
          - 'elvia-runner'
          - 'elvia-runner-dev'

env:
  APPLICATION_NAME: 'demo-api'
  SYSTEM_NAME: 'core'

jobs:
  set-runner:
    name: Set Runner
    runs-on: elvia-runner
    outputs:
      matrix: ${{ steps.set-runner.outputs.matrix }}
      matrix-trivy: ${{ steps.set-runner.outputs.matrix-trivy }}
      matrix-build: ${{ steps.set-runner.outputs.matrix-build }}
    steps:
      - id: set-runner
        run: |
          echo "matrix={\"runner\":[\"$RUNNER\"]}" >> "$GITHUB_OUTPUT"
          echo "matrix-trivy={\"runner\":[\"$RUNNER\",\"ubuntu-latest\"]}" >> "$GITHUB_OUTPUT"
          echo "matrix-build={\"runner\":[\"$RUNNER\",\"ubuntu-latest\"],\"build\":[\"csproj-file\",\"dockerfile\"]}" >> "$GITHUB_OUTPUT"
        env:
          RUNNER: ${{ github.event.name == 'workflow_dispatch' && inputs.runner || 'elvia-runner' }}

  unit-tests:
    name: Unit Tests
    needs: [set-runner]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      checks: write
      issues: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./unittest
        with:
          checkout: 'false'

  integration-tests:
    name: Integration Tests
    needs: [set-runner]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      checks: write
      issues: read
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./integrationtest
        with:
          checkout: 'false'
          system: ${{ env.SYSTEM_NAME }}

  analyze:
    name: Analyze
    needs: [set-runner]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./analyze
        with:
          checkout: 'false'

  build:
    name: Build
    needs: [set-runner]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix-build) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      id-token: write
    environment: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./build
        with:
          checkout: 'false'
          name: ${{ env.APPLICATION_NAME }}
          namespace: ${{ env.SYSTEM_NAME }}
          csproj-file: ${{ matrix.build == 'csproj-file' && '.github/test/src/core-demo-api.csproj' || '' }}
          dockerfile: ${{ matrix.build == 'dockerfile' && '.github/test/src/Dockerfile' || '' }}
          severity: 'CRITICAL'
          AZURE_CLIENT_ID: ${{ vars.ACR_CLIENT_ID }}

  deploy-dev:
    name: Deploy Dev
    needs: [build]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      id-token: write
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./deploy
        with:
          checkout: 'false'
          name: ${{ env.APPLICATION_NAME }}
          namespace: ${{ env.SYSTEM_NAME }}
          environment: 'dev'
          helm-values-path: '.github/test/deploy/values.yml'
          AZURE_CLIENT_ID: ${{ vars.AKS_CLIENT_ID }}

  deploy-dev-gke:
    name: Deploy Dev GKE
    needs: [build]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      id-token: write
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./deploy
        with:
          checkout: 'false'
          name: ${{ env.APPLICATION_NAME }}
          namespace: ${{ env.SYSTEM_NAME }}
          environment: 'dev'
          helm-values-path: '.github/test/deploy/values.yml'
          runtime-cloud-provider: 'GKE'
          GC_SERVICE_ACCOUNT: ${{ vars.GC_SERVICE_ACCOUNT }}
          GC_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GC_WORKLOAD_IDENTITY_PROVIDER }}

  trivy-iac-scan:
    name: Trivy IaC Scan
    needs: [set-runner]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix-trivy) }}
    runs-on: ${{ matrix.runner }}
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./trivy-iac-scan
        with:
          checkout: 'false'

  terraform-format-check:
    name: Terraform Format Check
    needs: [set-runner]
    strategy:
      matrix: ${{ fromJson(needs.set-runner.outputs.matrix) }}
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./terraform-format
        with:
          checkout: 'false'
