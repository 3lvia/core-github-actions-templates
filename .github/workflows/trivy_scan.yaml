name: Scan Terraform code with Trivy

on:
  workflow_call:

jobs:
  trivy_scan:
    name: "Scan Terraform code with Trivy"
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      pull-requests: write
    env:
      TRIVY_REPORT: trivy_report.txt
      TRIVY_COMMENT_PREFIX: "<!-- TRIVY REPORT -->"
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in IaC mode
        id: trivy_check
        uses: aquasecurity/trivy-action@0.16.1
        with:
          scan-type: 'config'
          format: 'table'
          output: ${{ env.TRIVY_REPORT }}
          exit-code: '2'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy report to step summary
        if: failure() && steps.trivy_check.outcome == 'failure'
        run: cat ${{ env.TRIVY_REPORT }} >> $GITHUB_STEP_SUMMARY

      - name: Comment on pull request with Trivy report
        uses: actions/github-script@v7.0.1
        if: failure() && steps.trivy_check.outcome == 'failure'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const trivyReport = fs.readFileSync('${{ env.TRIVY_REPORT }}', 'utf8');

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('${{ env.TRIVY_COMMENT_PREFIX }}')
            );

            const output = `${{ env.TRIVY_COMMENT_PREFIX }}\n# üîê Trivy Security Report\n\n${trivyReport}`;

            if (existingComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: output,
              });
            } else {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output,
              });
            }
