name: SonarCloud
description: 'Run SonarCloud scanning on dotnet code.'
inputs:
  checkout:
    description: 'If "true", the action will check out the repository. If "false", the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  working-directory:
    description: 'Will run SonarCloud on projects under this working directory.'
    required: false
    default: './'
  sonarcloud-project-key:
    description: 'If test coverage should be computed. Requires that all test projects include the Nuget package coverlet.collector. '
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Run unit tests
      if: ${{ inputs.test-coverage == 'false' }}
      shell: bash
      run: |
        testprojects=`find . -iname "${{ inputs.test-projects }}"`
        for testproject in $testprojects;
        do
          dotnet test -l:trx $testproject
        done
      working-directory: ${{ inputs.working-directory }}

    - name: Run unit tests
      if: ${{ inputs.test-coverage == 'true' }}
      shell: bash
      run: |
        testprojects=`find . -iname "${{ inputs.test-projects }}"`
        for testproject in $testprojects;
        do
          dotnet test -l:trx --collect:"XPlat Code Coverage" $testproject
        done
      working-directory: ${{ inputs.working-directory }}

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/TestResults/*.trx
          .github/**/TestResults/*.trx
        check_name: 'Unit Test Results'

    - name: Combine Coverage Reports # This is because one report is produced per project, and we want one result for all of them.
      if: ${{ inputs.test-coverage == 'true' }}
      uses: danielpalme/ReportGenerator-GitHub-Action@5
      with:
        reports: '**/*.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: '${{ github.workspace }}' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'Cobertura' # The output formats and scope (separated by semicolon) Values: Badges, Clover, Cobertura, CsvSummary, Html, Html_Dark, Html_Light, Html_BlueRed, HtmlChart, HtmlInline, HtmlInline_AzurePipelines, HtmlInline_AzurePipelines_Dark, HtmlInline_AzurePipelines_Light, HtmlSummary, JsonSummary, Latex, LatexSummary, lcov, MarkdownSummary, MarkdownSummaryGithub, MarkdownDeltaSummary, MHtml, PngChart, SonarQube, TeamCitySummary, TextSummary, TextDeltaSummary, Xml, XmlSummary
        verbosity: 'Info' # The verbosity level of the log messages. Values: Verbose, Info, Warning, Error, Off
        title: 'Code Coverage' # Optional title.
        tag: '${{ github.run_number }}_${{ github.run_id }}' # Optional tag or build version.
        customSettings: '' # Optional custom settings (separated by semicolon). See: https://github.com/danielpalme/ReportGenerator/wiki/Settings.
        toolpath: 'reportgeneratortool' # Default directory for installing the dotnet tool.

    - name: Publish Code Coverage Report
      if: ${{ inputs.test-coverage == 'true' }}
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'Cobertura.xml'
        badge: true
        fail_below_min: false # just informative for now
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '50 75'

    - name: Add Coverage PR Comment
      if: ${{ inputs.test-coverage == 'true' && github.event_name == 'pull_request' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: code-coverage-results.md
