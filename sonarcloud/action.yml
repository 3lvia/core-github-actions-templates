name: SonarCloud
description: 'Run SonarCloud scanning on dotnet code.'
inputs:
  github-token:
    description: 'Should normally be secrets.GITHUB_TOKEN'
    required: true
  sonarcloud-token:
    description: 'Should normally be secrets.SONAR_TOKEN'
    required: true
  checkout:
    description: 'If "true", the action will check out the repository. If "false", the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  working-directory:
    description: 'Will run SonarCloud on the solution or project in this directory.'
    required: false
    default: './'
  sonarcloud-project-key:
    description: 'If test coverage should be computed. Requires that all test projects include the Nuget package coverlet.collector. '
    required: true
  test-projects:
    description: 'Pattern to use to find test projects.'
    required: false
    default: '*unit*test*csproj'


runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner3
      uses: actions/cache@v3
      with:
        path: ./sonar/scanner
        key: ${{ runner.os }}-sonar-scanner3
        restore-keys: ${{ runner.os }}-sonar-scanner3
    - name: Install SonarCloud scanner
      shell: bash
      if: steps.cache-sonar-scanner3.outputs.cache-hit != 'true'
      run: |
        mkdir ./sonar ./sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./sonar/scanner
        dotnet tool install dotnet-coverage --tool-path ./sonar/scanner
    - name: Build and analyze
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ inputs.sonarcloud-token }}
      run: |
        ./sonar/scanner/dotnet-sonarscanner begin /k:"${{ inputs.sonarcloud-project-key }}" /o:"elvia" /d:sonar.login="${{ inputs.sonarcloud-token }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
        
        testprojects=`find . -iname "${{ inputs.test-projects }}"`
        for testproject in $testprojects;
        do
          ./sonar/scanner/dotnet-coverage collect "dotnet test -l:trx $testproject" -f xml  -o 'coverage.xml'
        done

        ./sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ inputs.sonarcloud-token }}"
      working-directory: ${{ inputs.working-directory }}
