name: 'Build'
description: |
  Builds a Docker image, scans for vulnerabilities using Trivy and pushes to either Azure Container Registry or GitHub Container Registry.
  This action is a wrapper around the [3lv CLI](https://github.com/3lvia/cli) build command (`3lv build`).
  To use the `Build` and `Deploy` actions with Elvias container registry and runtime services,
  you must first add your GitHub repository to [github-repositories-terraform](https://github.com/3lvia/github-repositories-terraform).
inputs:
  name:
    description: 'Name of application. This will be used as the image name. For Elvia applications, do not include the namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application. This is only relevant for Elvia applications.'
    required: false
  csproj-file:
    description: 'Path to a csproj-file, e.g. `src/my-app/my-app.csproj`.'
    required: false
    deprecationMessage: |
      Please use `project-file` instead, which is a drop-in replacement. `csproj-file` will be removed in the future.
  dockerfile:
    description: 'Path to a Dockerfile, e.g. `src/Dockerfile`.'
    required: false
    deprecationMessage: |
      Please use `project-file` instead, which is a drop-in replacement. `dockerfile` will be removed in the future.
  project-file:
    description: |
      Path to a `.csproj`-file for .NET, a `go.mod` file for Go or a Dockerfile for any other project.
      E.g. `applications/my-app/my-app.csproj`, `pkg/my-app/go.mod` or `src/Dockerfile`.
      If you require files outside the directory of the `project-file` to build your application, you will need to set `docker-build-context`.
    required: false
  go-main-package-dir:
    description: |
      Where the main package directory for Go projects is located, e.g. `./cmd/my-app`.
      Defaults to `./cmd/inputs.name`.
    required: false
  docker-build-context:
    description: |
      Docker build context, which is the working directory needed to build the Docker image.
      This is relative to the root of the repository.
      Defaults to the directory of `project-file`.
    required: false
  docker-cache-tag:
    description: |
      Tag used for getting build cache from registry.
      This tag is also pushed on every build, together with `github.sha-github.run_number`.
      This action will not push a `latest` tag; if you want a `latest` tag, you can use this input or `docker-additional-tags`.
    default: 'latest-cache'
  docker-additional-tags:
    description: 'Comma-separated list of additional tags to add to the image.'
    required: false
  docker-include-files:
    description: 'Comma-separated list of files to copy into the Docker image.'
    required: false
  docker-include-dirs:
    description: 'Comma-separated list of directories to copy into the Docker image.'
    required: false
  severity:
    description: |
      Severity levels to scan for.
      See [Trivy documentation](https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs) for more information.
    required: false
    default: 'CRITICAL'
  trivy-cve-ignores:
    description: |
      Comma-separated list of CVEs for Trivy to ignore.
      See [Trivy documentation](https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignore) for syntax.
    required: false
  trivy-upload-report:
    description: |
      If `true`, the action will upload Trivy scan results to GitHub Advanced Security.
      This actions requires GitHub Advanced Security to be enabled for the repository, and the permissions `actions: read` and `security-events: write` to be set for the job.
    required: false
    default: 'false'
  trivy-post-comment:
    description: |
      If `true`, the action will post a comment to the PR with the Trivy scan results.
      The comment will only be posted if the action is ran on a pull request.
      This action requires the permission `pull-requests: write` to be set for the job.
    required: false
    default: 'false'
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  registry:
    description: |
      What container registry to use, either `acr` or `ghcr`.
      If set to `acr`, credentials for Azure Container Registry will default to Elvia values.
      You can also set these explictly to point to your own ACR.
      Using ACR requires the permissions `id-token: write` to access the registry using OIDC.

      If set to `ghcr`, the action will use the GitHub Container Registry.
      Using GHCR requires the `packages: write` permission to push to the registry.
    required: false
    default: 'acr'
  AZURE_CLIENT_ID:
    description: 'ClientId of a service principal that can push to Azure Container Registry.'
    required: false
  AZURE_TENANT_ID:
    description: 'TenantId of a service principal that can push to Azure Container Registry.'
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  ACR_SUBSCRIPTION_ID:
    description: 'Subscription ID of the Azure Container Registry to push to.'
    required: false
    default: '9edbf217-b7c1-4f6a-ae76-d046cf932ff0'
  ACR_NAME:
    description: 'Name of the Azure Container Registry to push to.'
    required: false
    default: 'containerregistryelvia'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Authenticate with Azure
      if: ${{ inputs.registry == 'acr' }}
      uses: azure/login@v2.2.0
      env:
        AZURE_CORE_OUTPUT: 'none'
        AZURE_LOGIN_POST_CLEANUP: 'false' # we destroy VMs after use
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.ACR_SUBSCRIPTION_ID }}

    - name: Login to ACR
      if: ${{ inputs.registry == 'acr' }}
      shell: bash
      run: |
        # Login to ACR
        az acr login --name '${{ inputs.ACR_NAME }}'

    # Also used for increasing Trivy GHCR quota, might not have effect?
    # https://github.com/aquasecurity/trivy-action/issues/389
    - name: Login to Github Container Registry
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Setup Trivy ignore file
      shell: bash
      run: |
        # Setup Trivy ignore file
        touch .trivyignore

        if [ -z '${{ inputs.trivy-cve-ignores }}' ]; then
          echo "No CVEs to ignore."
          exit 0
        fi

        echo 'Ignoring CVEs: ${{ inputs.trivy-cve-ignores }}'
        for TRIVY_CVE in "$(echo ${{ inputs.trivy-cve-ignores }} | sed 's/,/ /g')"; do
          echo "$TRIVY_CVE" >> .trivyignore
        done

    - name: Install Trivy if not using Elvia runner
      if: ${{ !startsWith(runner.name, 'elvia-runner-') }}
      shell: bash
      run: |
        # Install Trivy if not using Elvia runner
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Install 3lv CLI
      uses: 3lvia/cli/setup@trunk
      with:
        version: '0.12.3' # TODO: remove this (which will get latest version) when 3lv CLI is stable

    - name: Handle deprecated inputs
      shell: bash
      run: |
        if [[ '${{ inputs.project-file }}' == '' ]]; then
          if [[ '${{ inputs.csproj-file }}' != '' ]]; then
            echo "Input 'csproj-file' is deprecated. Please use 'project-file' instead."
            echo 'PROJECT_FILE=${{ inputs.csproj-file }}' >> "$GITHUB_ENV"
          fi
          if [[ '${{ inputs.dockerfile }}' != '' ]]; then
            echo "Input 'dockerfile' is deprecated. Please use 'project-file' instead."
            echo 'PROJECT_FILE=${{ inputs.dockerfile }}' >> "$GITHUB_ENV"
          fi
        else
          echo 'PROJECT_FILE=${{ inputs.project-file }}' >> "$GITHUB_ENV"
        fi

    - name: Build with 3lv
      shell: bash
      run: |
        # Regrettably, we have to do some bash here since we cannot get the name
        # of a repository (without owner) using just GitHub Actions syntax.
        #
        # We should try to encapsulate as much business logic
        # as possible in the `env`-block below, or in the 3lv CLI.
        if [[ '${{ inputs.namespace }}' == '' ]]; then
          SYSTEM_NAME="${GITHUB_REPOSITORY##*/}"
        else
          SYSTEM_NAME='${{ inputs.namespace }}'
        fi

        3lv build \
          --project-file "$PROJECT_FILE" \
          --system-name "$SYSTEM_NAME" \
          --registry "$REGISTRY" \
          --scan-formats table,sarif,markdown \
          --additional-tags "$ADDITIONAL_TAGS" \
          --push \
          '${{ inputs.name }}'
      env:
        REGISTRY: ${{ inputs.registry == 'ghcr' && format('ghcr.io/{0}', github.repository_owner) || format('{0}.azurecr.io', inputs.ACR_NAME) }}
        ADDITIONAL_TAGS: "${{ github.sha }}-${{ github.run_number }}${{ inputs.docker-additional-tags == '' && '' || ',' }}${{ inputs.docker-additional-tags }}"
        # Pass optional inputs as environment variables, since they can be empty.
        # The CLI does not accept empty strings passed to the flags, e.g. `--go-main-package-dir ''` will cause an error.
        3LV_BUILD_CONTEXT: ${{ inputs.docker-build-context }}
        3LV_GO_MAIN_PACKAGE_DIR: ${{ inputs.go-main-package-dir }}
        3LV_CACHE_TAG: ${{ inputs.docker-cache-tag }}
        3LV_INCLUDE_FILES: ${{ inputs.docker-include-files }}
        3LV_INCLUDE_DIRS: ${{ inputs.docker-include-dirs }}
        3LV_SEVERITY: ${{ inputs.severity }}

    - name: Upload Trivy scan results to GitHub Advanced Security
      if: ${{ inputs.trivy-upload-report == 'true' && !cancelled() }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy.sarif'
        category: 'Trivy'

    - name: Add comment for Trivy scan results to PR
      if: ${{ github.event_name == 'pull_request' && inputs.trivy-post-comment == 'true' && !cancelled() }}
      uses: actions/github-script@v7
      env:
        APPLICATION_NAME: ${{ inputs.name }}
      with:
        script: |
          const fs = require('fs');

          const body = (() => {
              const fileContents = fs.readFileSync('trivy.md', 'utf8');
              const footer = '\n\n\n (comment too long, see action output)...';
              const MAX_COMMENT_LENGTH = 65536;

              if (fileContents.length > MAX_COMMENT_LENGTH) {
                 return fileContents.slice(0, MAX_COMMENT_LENGTH - footer.length) + footer;
              }

              return fileContents;
          })();

          const identifyingHeader = `<!-- ${process.env.APPLICATION_NAME} -->\n`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(
            (comment) =>
              comment.user.type === "Bot" &&
              comment.body.includes(identifyingHeader)
          );

          if (existingComment && body) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: identifyingHeader + body,
            });
            return;
          }

          if (existingComment && !body) {
            await github.rest.issues.deleteComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            return;
          }

          if (body) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: identifyingHeader + body,
            });
          }
