name: 'Build'
description: 'Builds Docker image, scans for vulnerabilities using Trivy and pushes to Azure Container Registry. To use the `Build` and `Deploy` actions, you must first add your Github repository to https://github.com/3lvia/github-repositories-terraform. Required permissions: `contents: read` and `id-token: write`.'
inputs:
  name:
    description: 'Name of application. Do not include namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application.'
    required: true
  dockerfile:
    description: 'Path to Dockerfile.'
    required: true
  dockerBuildContext:
    description: 'Docker build context, which is the working directory needed to build the dockerfile. Defaults to the directory of the Dockerfile.'
    required: false
  severity:
    description: 'Severity levels to scan for. See https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs for more information.'
    required: false
    default: 'CRITICAL,HIGH'
  trivy-cve-ignores:
    description: 'Comma-separated list of CVEs for Trivy to ignore. See https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignore for syntax.'
    required: false
  trivy-enable-secret-scanner:
    description: 'Enable Trivy secret scanner.'
    required: false
    default: 'true'
  trivy-skip-dirs:
    description: 'Directories/files skipped by Trivy. See https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs for more information.'
    required: false
  checkout:
    description: 'If "true", the action will check out the repository. If "false", the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  AZURE_CLIENT_ID:
    description: 'ClientId of a service principal that can push to Container Registry.'
    required: true
  AZURE_TENANT_ID:
    description: "TenantId of a service principal that can push to Azure Container Registry. Default to Elvia's Tenant ID."
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  ACR_SUBSCRIPTION_ID:
    description: "Subscription ID of the Azure Container Registry to push to. Defaults to subscription ID of Elvia's standard ACR."
    required: false
    default: '9edbf217-b7c1-4f6a-ae76-d046cf932ff0'
  ACR_NAME:
    description: "Name of the Azure Container Registry to push to. Defaults to Elvia's standard ACR."
    required: false
    default: containerregistryelvia

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Parse input and set environment variables
      shell: bash
      run: |
        # Parse input and set environment variables
        export IMAGE_NAME="containerregistryelvia.azurecr.io/${{ inputs.namespace }}-${{ inputs.name }}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
        echo "IMAGE_LONG_NAME=$IMAGE_NAME:${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"

        if [ -z "${{ inputs.dockerBuildContext }}" ]
        then
            export DOCKER_DIR=`dirname ${{ inputs.dockerfile }}` # default to the directory of the Dockerfile
        else
            export DOCKER_DIR=${{ inputs.dockerBuildContext }}
        fi
        echo "DOCKER_DIR=$DOCKER_DIR" >> "$GITHUB_ENV"

        if [ -z "${{ inputs.AZURE_CLIENT_ID }}" ]
        then
            echo "Missing required input AZURE_CLIENT_ID. Ensure that this is set and non-empty".
            exit 1
        fi

    - name: Authenticate with Azure
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.ACR_SUBSCRIPTION_ID }}

    - name: Login to ACR
      shell: bash
      run: az acr login --name ${{ inputs.ACR_NAME }}

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.DOCKER_DIR }}
        push: false
        load: true
        tags: '${{ env.IMAGE_LONG_NAME }},${{ env.IMAGE_NAME }}:latest-cache'
        cache-from: 'type=registry,ref=${{ env.IMAGE_NAME }}:latest-cache'
        cache-to: 'type=inline'

    - name: Setup Trivy ignore file
      shell: bash
      run: |
        # Setup Trivy ignore file
        touch .trivyignore

        if [ -z "${{ inputs.trivy-cve-ignores }}" ]; then
          echo "No CVEs to ignore"
          exit 0
        fi

        echo "Ignoring CVEs: ${{ inputs.trivy-cve-ignores }}"
        for TRIVY_CVE in "$(echo ${{ inputs.trivy-cve-ignores }} | sed 's/,/ /g')"; do
          echo "$TRIVY_CVE" >> .trivyignore
        done

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_LONG_NAME }}
        exit-code: '1'
        format: 'table'
        severity: ${{ inputs.severity }}
        trivyignores: '.trivyignore'
        ignore-unfixed: true
        scanners: ${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}
        skip-dirs: ${{ inputs.trivy-skip-dirs }}
      if: github.event_name == 'pull_request'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_LONG_NAME }}
        format: 'sarif'
        template: '@/contrib/sarif.tpl'
        output: 'trivy.sarif'
        severity: ${{ inputs.severity }}
        trivyignores: '.trivyignore'
        ignore-unfixed: true
        scanners: ${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}
        skip-dirs: ${{ inputs.trivy-skip-dirs }}
      if: github.event_name == 'push'

    # GitHub Security tab does not support SARIF files with `git::` or `https:/` URL's:
    # https://github.com/aquasecurity/trivy/issues/5003#issuecomment-1780415058
    - name: Fix Trivy output
      shell: bash
      run: |
        # Fix Trivy output
        sed -i 's#git::https:/##g' "trivy.sarif"
      if: github.event_name == 'push' && failure()

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy.sarif
        category: 'Trivy'
      if: github.event_name == 'push' && failure()

    - name: Push image
      shell: bash
      run: docker push '${{ env.IMAGE_NAME }}' --all-tags
