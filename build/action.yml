name: 'Build'
description: 'Builds Docker image, scans for vulnerabilities using Trivy and pushes to Azure Container Registry or GitHub Container Registry. To use the `Build` and `Deploy` actions with Elvias container registry and runtime services, you must first add your GitHub repository to https://github.com/3lvia/github-repositories-terraform.'
inputs:
  name:
    description: 'Name of application. This will be used as the image name. For Elvia applications, do not include the namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application. This is only relevant for Elvia applications.'
    required: false
  csproj-file:
    description: 'Path to a csproj-file, e.g. `src/my-app/my-app.csproj`. Either this or `dockerfile` must be given. This argument takes precedence over `dockerfile`.'
    required: false
  dockerfile:
    description: 'Path to Dockerfile, e.g. `src/Dockerfile`. Either this or `csproj-file` must be given.'
    default: 'Dockerfile'
    required: false
  docker-build-context:
    description: 'Docker build context, which is the working directory needed to build the dockerfile. Defaults to the directory of the Dockerfile.'
    required: false
  docker-cache-tag:
    description: 'Tag used for getting build cache from registry. This tag is also pushed on every build, together with `github.sha-github.run_number`. This action will push a `latest` tag, but you can set this to `latest` if you want to have a separate tag for the latest build.'
    default: 'latest-cache'
  severity:
    description: 'Severity levels to scan for. See https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs for more information.'
    required: false
    default: 'CRITICAL'
  trivy-cve-ignores:
    description: 'Comma-separated list of CVEs for Trivy to ignore. See https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignore for syntax.'
    required: false
  trivy-enable-secret-scanner:
    description: 'Enable Trivy secret scanner.'
    required: false
    default: 'true'
  trivy-skip-dirs:
    description: 'Directories/files skipped by Trivy. See https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs for more information.'
    required: false
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  registry:
    description: 'What container registry to use, either `acr` or `ghcr`. If set to `acr`, credentials for Azure Container Registry will default to Elvia values. You can also set these explictly to point to your own ACR. If set to `ghcr`, the action will use the GitHub Container Registry. This requires `github-token` to be set, and the `packages: write` permission.'
    required: false
    default: 'acr'
  github-token:
    description: 'GitHub token for GitHub Container Registry. Required if `registry` is set to `ghcr`. Should normally be `secrets.GITHUB_TOKEN`.'
    required: false
  AZURE_CLIENT_ID:
    description: 'ClientId of a service principal that can push to Azure Container Registry.'
    required: false
  AZURE_TENANT_ID:
    description: 'TenantId of a service principal that can push to Azure Container Registry.'
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  ACR_SUBSCRIPTION_ID:
    description: 'Subscription ID of the Azure Container Registry to push to.'
    required: false
    default: '9edbf217-b7c1-4f6a-ae76-d046cf932ff0'
  ACR_NAME:
    description: 'Name of the Azure Container Registry to push to.'
    required: false
    default: 'containerregistryelvia'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Generate Dockerfile
      id: generate_dockerfile
      if: ${{ inputs.csproj-file != '' }}
      shell: bash
      run: |
        # Generate Dockerfile
        python '${{ github.action_path }}/create_dockerfile.py'
      env:
        CSPROJ_FILE: ${{ inputs.csproj-file }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Parse input and set environment variables
      shell: bash
      run: |
        # Parse input and set environment variables
        if [[ '${{ inputs.registry }}' == 'acr' ]]; then
          if [[ -z '${{ inputs.namespace }}' ]]; then
            echo 'Namespace must be given for Elvia applications.'
            exit 1
          fi
          IMAGE_NAME='${{ inputs.ACR_NAME }}.azurecr.io/${{ inputs.namespace }}-${{ inputs.name }}'
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "IMAGE_LONG_NAME=$IMAGE_NAME:${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"
        elif [[ '${{ inputs.registry }}' == 'ghcr' ]]; then
          IMAGE_NAME=$(echo 'ghcr.io/${{ inputs.name }}' | tr '[:upper:]' '[:lower:]') # Docker tag must be lowercase
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "IMAGE_LONG_NAME=$IMAGE_NAME:${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"
        else
          echo 'Invalid registry. Must be either `acr` or `ghcr`.'
          exit 1
        fi

        if [[ '${{ inputs.csproj-file }}' == '' && '${{ inputs.dockerfile }}' == '' ]]; then
            echo 'Either csproj-file or dockerfile must be given.'
            exit 1
        fi

        if [[ '${{ inputs.AZURE_CLIENT_ID }}' == '' && '${{ inputs.registry }}' == 'acr' ]]; then
            echo 'Missing required input AZURE_CLIENT_ID. Ensure that this is set and non-empty.'
            exit 1
        fi

        if [[ '${{ inputs.github-token }}' == '' && '${{ inputs.registry }}' == 'ghcr' ]]; then
            echo 'Missing required input github-token. Ensure that this is set and non-empty.'
            exit 1
        fi

        if [[ -z '${{ inputs.docker-build-context }}' ]]; then
            DOCKER_DIR=$(dirname '${{ inputs.dockerfile }}') # default to the directory of the Dockerfile
        else
            DOCKER_DIR='${{ inputs.docker-build-context }}'
        fi
        echo "DOCKER_DIR=$DOCKER_DIR" >> "$GITHUB_ENV"

        if [[ -z '${{ steps.generate_dockerfile.outputs.DOCKERFILE }}' ]]; then
            DOCKERFILE='${{ inputs.dockerfile }}'
        else
            DOCKERFILE='${{ steps.generate_dockerfile.outputs.DOCKERFILE }}'
        fi
        echo "DOCKERFILE=$DOCKERFILE" >> "$GITHUB_ENV"

    - name: Print Dockerfile variable
      shell: bash
      run: |
        # Print Dockerfile variable
        echo 'Dockerfile: ${{ env.DOCKERFILE }}'
        cat '${{ env.DOCKERFILE }}'

    - name: Authenticate with Azure
      if: ${{ inputs.registry == 'acr' }}
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.ACR_SUBSCRIPTION_ID }}

    - name: Login to ACR
      if: ${{ inputs.registry == 'acr' }}
      shell: bash
      run: |
        # Login to ACR
        az acr login --name '${{ inputs.ACR_NAME }}'

    - name: Login to Github Container Registry
      if: ${{ inputs.registry == 'ghcr' }}
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Build image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.DOCKER_DIR }}
        file: ${{ env.DOCKERFILE }}
        push: 'false'
        load: 'true'
        tags: '${{ env.IMAGE_LONG_NAME }},${{ env.IMAGE_NAME }}:${{ inputs.docker-cache-tag }}'
        cache-from: 'type=registry,ref=${{ env.IMAGE_NAME }}:${{ inputs.docker-cache-tag }}'
        cache-to: 'type=inline'

    - name: Setup Trivy ignore file
      shell: bash
      run: |
        # Setup Trivy ignore file
        touch .trivyignore

        if [ -z '${{ inputs.trivy-cve-ignores }}' ]; then
          echo "No CVEs to ignore"
          exit 0
        fi

        echo 'Ignoring CVEs: ${{ inputs.trivy-cve-ignores }}'
        for TRIVY_CVE in "$(echo ${{ inputs.trivy-cve-ignores }} | sed 's/,/ /g')"; do
          echo "$TRIVY_CVE" >> .trivyignore
        done

    - name: Install Trivy if not using Elvia runner
      if: ${{ !startsWith(runner.name, 'elvia-runner-prod') }}
      shell: bash
      run: |
        # Install Trivy if not using Elvia runner
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scanner (pull request)
      if: ${{ github.event_name == 'pull_request' && startsWith(runner.name, 'elvia-runner-prod') }}
      shell: bash
      run: |
        # Run Trivy
        trivy image '${{ env.IMAGE_LONG_NAME }}' \
          --exit-code 1 \
          --format table \
          --severity '${{ inputs.severity }}' \
          --ignorefile .trivyignore \
          --ignore-unfixed \
          --scanners '${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}' \
          ${{ inputs.trivy-skip-dirs != '' && format('--skip-dirs {0}', inputs.trivy-skip-dirs) || '' }}

    - name: Run Trivy vulnerability scanner (push)
      if: ${{ github.event_name == 'push' && startsWith(runner.name, 'elvia-runner-prod') }}
      shell: bash
      run: |
        # Run Trivy
        trivy image '${{ env.IMAGE_LONG_NAME }}' \
          --exit-code 1 \
          --format sarif \
          --output trivy.sarif \
          --severity '${{ inputs.severity }}' \
          --ignorefile .trivyignore \
          --ignore-unfixed \
          --scanners '${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}' \
          ${{ inputs.trivy-skip-dirs != '' && format('--skip-dirs {0}', inputs.trivy-skip-dirs) || '' }}

    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ github.event_name == 'push' && failure() }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy.sarif
        category: 'Trivy'

    - name: Push image
      shell: bash
      run: |
        # Push image
        docker push '${{ env.IMAGE_NAME }}' --all-tags
