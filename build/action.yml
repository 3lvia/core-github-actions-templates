name: Build and Scan
description: Build docker image and scan for vulnerabilities

inputs:
  name:
    description: "Name of application. Do not include namespace."
    required: true
  namespace:
    description: "Namespace or system of the application."
    required: true
  dockerfile:
    description: "Path to Dockerfile."
    required: true
  dockerBuildContext:
    description: "Docker build context. It is the working directory needed to build the dockerfile. Defaults to the directory with the Dockerfile."
    required: false
  severity:
    description: "Severity levels to scan for. See https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs for more information."
    required: false
    default: "CRITICAL,HIGH"
  AZURE_CLIENT_ID:
    description: "ClientId of a service principal that can push to Container Registry."
    required: false
    default: ""
  AZURE_TENANT_ID:
    description: "TenantId of a service principal that can push to Azure Container Registry."
    required: false
    default: ""
  ACR_SUBSCRIPTION_ID:
    description: "Subscription ID of the Azure Container Registry to push to."
    required: false
    default: ""
  ACR_NAME:
    description: "Name of the Azure Container Registry to push to."
    required: false
    default: containerregistryelvia

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Read secrets from vault
      uses: hashicorp/vault-action@v2
      if: always()
      with:
        url: https://vault.dev-elvia.io/
        role: jwt-github-${{ inputs.namespace }}
        method: jwt
        path: jwt-github
        secrets: |
          monitoring/kv/data/shared grafana_api_url        | GRAFANA_URL ;
          monitoring/kv/data/shared grafana_editor_api_key | GRAFANA_API_KEY

    - name: Output
      shell: bash
      if: always()
      run: |
        set -x
        echo ${{ env.GRAFANA_URL }}
        python3 --version
        gitMessage=$(git log -1 --no-merges --pretty=%B)
        echo $gitMessage
        ls -lR
        python3 ${{ github.action_path }}/deploy/post-grafana-annotations.py --what "Deploy ${{ job.status }} - " --data '$GITHUB_RUN_ID $gitMessage <a href="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID">Link</a>' --tags "{app: ${{ inputs.name }}, system: ${{ inputs.namespace }}, env: dev, event: deploy}"

    - name: Echo input
      if: always()
      shell: bash
      run: |
        echo "AZURE_CLIENT_ID: $AZURE_CLIENT_ID"

    - name: Build image
      shell: bash
      run: |
        if [ -z "${{ inputs.dockerBuildContext}}" ]
        then
            dir=`dirname ${{ inputs.dockerfile}}` # default to the directory of the Dockerfile
            echo "dockerBuildContextempty - dir: $dir"
        else
            dir=${{ inputs.dockerBuildContext}}
            echo "dockerBuildContext set - dir: $dir"
        fi
        echo "dir: $dir"
        docker build --tag ${{ env.IMAGE_LONG_NAME}} -f ${{ inputs.dockerfile}} $dir

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_LONG_NAME}}
        format: "table"
        exit-code: "1"
        ignore-unfixed: true
        severity: ${{ inputs.severity }}
        # github-pat: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'pull_request'

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_LONG_NAME}}
        format: "sarif"
        template: "@/contrib/sarif.tpl"
        output: trivy.sarif
        severity: ${{ inputs.severity }}
        # github-pat: ${{ secrets.GITHUB_TOKEN }}
        ignore-unfixed: true
      if: github.event_name == 'push'

    # GitHub Security tab does not support SARIF files with `git::` or `https:/` URL's:
    # https://github.com/aquasecurity/trivy/issues/5003#issuecomment-1780415058
    - name: Fix Trivy output
      shell: bash
      run: sed -i 's#git::https:/##g' "trivy.sarif"
      if: github.event_name == 'push'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy.sarif
        category: "Trivy"
      if: github.event_name == 'push'

    - name: Authenticate with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID }}
        tenant-id: ${{ env.AZURE_TENANT_ID }}
        subscription-id: ${{ env.ACR_SUBSCRIPTION_ID }}

    - name: Login ACR
      shell: bash
      run: az acr login --name ${{ inputs.ACR_NAME }}

    - name: Push image
      shell: bash
      run: docker push ${{ env.IMAGE_LONG_NAME}}
