name: 'Build'
description: |
  Builds a Docker image, scans for vulnerabilities using Trivy and pushes to either Azure Container Registry or GitHub Container Registry.
  To use the `Build` and `Deploy` actions with Elvias container registry and runtime services,
  you must first add your GitHub repository to [github-repositories-terraform](https://github.com/3lvia/github-repositories-terraform).
inputs:
  name:
    description: 'Name of application. This will be used as the image name. For Elvia applications, do not include the namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application. This is only relevant for Elvia applications.'
    required: false
  csproj-file:
    description: 'Path to a csproj-file, e.g. `src/my-app/my-app.csproj`.'
    required: false
    deprecationMessage: |
      This input is deprecated and has been superseded; please use `project-file` instead. `csproj-file` will be removed in the future.
  dockerfile:
    description: 'Path to a Dockerfile, e.g. `src/Dockerfile`.'
    required: false
    deprecationMessage: |
      This input is deprecated and has been superseded; please use `project-file` instead. `dockerfile` will be removed in the future.
  project-file:
    description: |
      Path to a `.csproj`-file for .NET, a `go.mod` file for Go or a Dockerfile for any other project.
      E.g. `applications/my-app/my-app.csproj`, `pkg/my-app/go.mod` or `src/Dockerfile`.
      If you require files outside the directory of the `project-file` to build your application, you will need to set `docker-build-context`.
    required: false
  docker-build-context:
    description: |
      Docker build context, which is the working directory needed to build the Docker image.
      This is relative to the root of the repository.
      Defaults to the directory of `project-file`.
    required: false
  docker-cache-tag:
    description: |
      Tag used for getting build cache from registry.
      This tag is also pushed on every build, together with `github.sha-github.run_number`.
      This action will not push a `latest` tag; if you want a `latest` tag, you can use this input or `docker-additional-tags`.
    default: 'latest-cache'
  docker-additional-tags:
    description: 'Comma-separated list of additional tags to add to the image.'
    required: false
  docker-include-files:
    description: 'Comma-separated list of files to copy into the Docker image.'
    required: false
  docker-include-dirs:
    description: 'Comma-separated list of directories to copy into the Docker image.'
    required: false
  ghcr-omit-repository-name:
    description: |
      If `true`, the action will not include the repository name in the image name.
      **This is only supported when using `ghcr` as `registry`.**
    required: false
    default: 'false'
  severity:
    description: |
      Severity levels to scan for.
      See [Trivy documentation](https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs) for more information.
    required: false
    default: 'CRITICAL'
  trivy-cve-ignores:
    description: |
      Comma-separated list of CVEs for Trivy to ignore.
      See [Trivy documentation](https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignore) for syntax.
    required: false
  trivy-enable-secret-scanner:
    description: 'Enable Trivy secret scanner.'
    required: false
    default: 'true'
  trivy-skip-dirs:
    description: 'Directories/files skipped by Trivy.'
    required: false
  disable-trivy:
    description: 'If `true`, the action will not run Trivy. **THIS IS NOT RECOMMENDED.**'
    required: false
    default: 'false'
    deprecationMessage: 'This input is deprecated and will be removed in the future.'
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  registry:
    description: |
      What container registry to use, either `acr` or `ghcr`.
      If set to `acr`, credentials for Azure Container Registry will default to Elvia values.
      You can also set these explictly to point to your own ACR.
      If set to `ghcr`, the action will use the GitHub Container Registry.
      This requires `github-token` to be set, and the `packages: write` permission.'
    required: false
    default: 'acr'
  github-token:
    description: 'GitHub token for GitHub Container Registry. **Required if `registry` is set to `ghcr`**. Should normally be `secrets.GITHUB_TOKEN`.'
    required: false
  AZURE_CLIENT_ID:
    description: 'ClientId of a service principal that can push to Azure Container Registry.'
    required: false
  AZURE_TENANT_ID:
    description: 'TenantId of a service principal that can push to Azure Container Registry.'
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  ACR_SUBSCRIPTION_ID:
    description: 'Subscription ID of the Azure Container Registry to push to.'
    required: false
    default: '9edbf217-b7c1-4f6a-ae76-d046cf932ff0'
  ACR_NAME:
    description: 'Name of the Azure Container Registry to push to.'
    required: false
    default: 'containerregistryelvia'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5

    - name: Generate Dockerfile
      id: generate-dockerfile
      shell: bash
      run: |
        # Generate Dockerfile
        export DOCKER_BUILD_CONTEXT='${{ inputs.docker-build-context }}'
        export INCLUDE_FILES='${{ inputs.docker-include-files }}'
        export INCLUDE_DIRS='${{ inputs.docker-include-dirs }}'

        if [[ '${{ inputs.project-file }}' == *csproj || '${{ inputs.csproj-file }}' != '' ]]; then
          # for backwards compatibility with deprecated input
          if [[ '${{ inputs.csproj-file }}' != '' ]]; then
            export CSPROJ_FILE='${{ inputs.csproj-file }}'
          else
            export CSPROJ_FILE='${{ inputs.project-file }}'
          fi

          go run $(ls "$GITHUB_ACTION_PATH"/*.go | grep -v _test.go)
        elif [[ '${{ inputs.project-file }}' == *go.mod ]]; then
          export GO_MOD_FILE='${{ inputs.project-file }}'
          go run $(ls "$GITHUB_ACTION_PATH"/*.go | grep -v _test.go)
        elif [[ '${{ inputs.project-file }}' == *Dockerfile ]]; then
          echo 'Dockerfile already exists at ${{ inputs.project-file }}.'
        # for backwards compatibility with deprecated input
        elif [[ '${{ inputs.dockerfile }}' != '' ]]; then
          echo 'Dockerfile already exists at ${{ inputs.dockerfile }}.'
        else
          error_message='Invalid project-file. Must be either a .csproj file, a go.mod file or a Dockerfile.'
          echo "$error_message"
          echo "### :x:" >> "$GITHUB_STEP_SUMMARY"
          echo "$error_message" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

    - name: Parse input and set environment variables
      shell: bash
      run: |
        # Parse input and set environment variables
        if [[ '${{ inputs.registry }}' == 'acr' ]]; then
          if [[ -z '${{ inputs.namespace }}' ]]; then
            error_message='The input `namespace` must be set for Elvia applications.'
            echo "$error_message"
            echo "### :x:" >> "$GITHUB_STEP_SUMMARY"
            echo "$error_message" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

          IMAGE_NAME='${{ inputs.ACR_NAME }}.azurecr.io/${{ inputs.namespace }}-${{ inputs.name }}'
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "IMAGE_LONG_NAME=$IMAGE_NAME:${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"
        elif [[ '${{ inputs.registry }}' == 'ghcr' ]]; then
          if [[ '${{ inputs.ghcr-omit-repository-name }}' == 'true' ]]; then
            IMAGE_NAME=$(echo 'ghcr.io/${{ github.repository_owner }}/${{ inputs.name }}' | tr '[:upper:]' '[:lower:]') # Docker tag must be lowercase
          else
            IMAGE_NAME=$(echo 'ghcr.io/${{ github.repository }}/${{ inputs.name }}' | tr '[:upper:]' '[:lower:]') # Docker tag must be lowercase
          fi

          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_ENV"
          echo "IMAGE_LONG_NAME=$IMAGE_NAME:${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"
        else
          error_message='Invalid registry. Must be either `acr` or `ghcr`.'
          echo "$error_message"
          echo "### :x:" >> "$GITHUB_STEP_SUMMARY"
          echo "$error_message" >> "$GITHUB_STEP_SUMMARY"
          exit 1
        fi

        if [[ '${{ inputs.docker-additional-tags }}' != '' ]]; then
          additional_tags=()
          for additional_tag in $(echo '${{ inputs.docker-additional-tags }}' | sed 's/,/ /g'); do
            additional_tags+=("$IMAGE_NAME:$additional_tag")
          done
          printf -v additional_tags_str "%s\n" "${additional_tags[@]}"
          {
            echo 'DOCKER_ADDITIONAL_TAGS<<EOF'
            echo "$additional_tags_str"
            echo 'EOF'
          } >> "$GITHUB_ENV"
        fi

        if [[ '${{ inputs.AZURE_CLIENT_ID }}' == '' && '${{ inputs.registry }}' == 'acr' ]]; then
            error_message='Missing required input `AZURE_CLIENT_ID`. Ensure that this is set and non-empty.'
            echo "$error_message"
            echo "### :x:" >> "$GITHUB_STEP_SUMMARY"
            echo "$error_message" >> "$GITHUB_STEP_SUMMARY"
            exit 1
        fi

        if [[ '${{ inputs.github-token }}' == '' && '${{ inputs.registry }}' == 'ghcr' ]]; then
            error_message='Missing required input `github-token`. Ensure that this is set and non-empty.'
            echo "$error_message"
            echo "### :x:" >> "$GITHUB_STEP_SUMMARY"
            echo "$error_message" >> "$GITHUB_STEP_SUMMARY"
            exit 1
        fi

        if [[ '${{ steps.generate-dockerfile.outputs.DOCKERFILE }}' == '' ]]; then
          # for backwards compatibility with deprecated input
          if [[ '${{ inputs.dockerfile }}' != '' ]]; then
            DOCKERFILE='${{ inputs.dockerfile }}'
          else
            DOCKERFILE='${{ inputs.project-file }}'
          fi

          if [[ -z '${{ inputs.docker-build-context }}' ]]; then
            DOCKER_BUILD_CONTEXT=$(dirname "$DOCKERFILE")
          fi
        else
            DOCKERFILE='${{ steps.generate-dockerfile.outputs.DOCKERFILE }}'
            DOCKER_BUILD_CONTEXT='${{ steps.generate-dockerfile.outputs.DOCKER_BUILD_CONTEXT }}'
            # echo "### Generated dockerfile" >> "$GITHUB_STEP_SUMMARY"
            # echo '```' >> "$GITHUB_STEP_SUMMARY"
            # cat "$DOCKERFILE" >> "$GITHUB_STEP_SUMMARY"
            # echo '```' >> "$GITHUB_STEP_SUMMARY"
        fi

        echo "DOCKERFILE=$DOCKERFILE" >> "$GITHUB_ENV"
        echo "DOCKER_BUILD_CONTEXT=$DOCKER_BUILD_CONTEXT" >> "$GITHUB_ENV"

    - name: Authenticate with Azure
      if: ${{ inputs.registry == 'acr' }}
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ inputs.ACR_SUBSCRIPTION_ID }}

    - name: Login to ACR
      if: ${{ inputs.registry == 'acr' }}
      shell: bash
      run: |
        # Login to ACR
        az acr login --name '${{ inputs.ACR_NAME }}'

    - name: Login to Github Container Registry
      if: ${{ inputs.registry == 'ghcr' }}
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ inputs.github-token }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.DOCKER_BUILD_CONTEXT }}
        file: ${{ env.DOCKERFILE }}
        push: 'false'
        load: 'true'
        tags: |
          ${{ env.IMAGE_LONG_NAME }}
          ${{ env.IMAGE_NAME }}:${{ inputs.docker-cache-tag }}
          ${{ env.DOCKER_ADDITIONAL_TAGS }}
        cache-from: 'type=registry,ref=${{ env.IMAGE_NAME }}:${{ inputs.docker-cache-tag }}'
        cache-to: 'type=inline'

    - name: Setup Trivy ignore file
      if: ${{ inputs.disable-trivy == 'false' }}
      shell: bash
      run: |
        # Setup Trivy ignore file
        touch .trivyignore

        if [ -z '${{ inputs.trivy-cve-ignores }}' ]; then
          echo "No CVEs to ignore."
          exit 0
        fi

        echo 'Ignoring CVEs: ${{ inputs.trivy-cve-ignores }}'
        for TRIVY_CVE in "$(echo ${{ inputs.trivy-cve-ignores }} | sed 's/,/ /g')"; do
          echo "$TRIVY_CVE" >> .trivyignore
        done

    - name: Install Trivy if not using Elvia runner
      if: ${{ !startsWith(runner.name, 'elvia-runner-') && inputs.disable-trivy == 'false' }}
      shell: bash
      run: |
        # Install Trivy if not using Elvia runner
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Run Trivy vulnerability scanner (pull request)
      if: ${{ github.event_name == 'pull_request' && inputs.disable-trivy == 'false' }}
      shell: bash
      run: |
        # Run Trivy
        trivy image '${{ env.IMAGE_LONG_NAME }}' \
          --exit-code 1 \
          --format table \
          --severity '${{ inputs.severity }}' \
          --ignorefile .trivyignore \
          --ignore-unfixed \
          --scanners '${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}' \
          ${{ inputs.trivy-skip-dirs != '' && format('--skip-dirs {0}', inputs.trivy-skip-dirs) || '' }}

    - name: Run Trivy vulnerability scanner (push)
      if: ${{ github.event_name == 'push' && inputs.disable-trivy == 'false' }}
      shell: bash
      run: |
        # Run Trivy
        trivy image '${{ env.IMAGE_LONG_NAME }}' \
          --exit-code 1 \
          --format sarif \
          --output trivy.sarif \
          --severity '${{ inputs.severity }}' \
          --ignorefile .trivyignore \
          --ignore-unfixed \
          --scanners '${{ inputs.trivy-enable-secret-scanner == 'true' && 'vuln,misconfig,secret' || 'vuln,misconfig' }}' \
          ${{ inputs.trivy-skip-dirs != '' && format('--skip-dirs {0}', inputs.trivy-skip-dirs) || '' }}

    - name: Upload Trivy scan results to GitHub Security tab
      if: ${{ github.event_name == 'push' && failure() && inputs.disable-trivy == 'false' }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy.sarif
        category: 'Trivy'

    - name: Push image
      shell: bash
      run: |
        # Push image
        docker push '${{ env.IMAGE_NAME }}' --all-tags
