name: 'Build'
description: |
  Builds a Docker image, scans for vulnerabilities using Trivy and pushes to either Azure Container Registry or GitHub Container Registry.
  This action is a wrapper around the [3lv CLI](https://github.com/3lvia/cli) build command (`3lv build`).
  To use the `Build` and `Deploy` actions with Elvias container registry and runtime services,
  you must first add your GitHub repository to [github-repositories-terraform](https://github.com/3lvia/github-repositories-terraform).
inputs:
  name:
    description: 'Name of application. This will be used as the image name. For Elvia applications, do not include the namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application. Required for Elvia applications.'
    required: false
  csproj-file:
    description: 'Path to a csproj-file, e.g. `src/my-app/my-app.csproj`.'
    required: false
    deprecationMessage: |
      Please use `project-file` instead, which is a drop-in replacement. `csproj-file` will be removed in the future.
  dockerfile:
    description: 'Path to a Dockerfile, e.g. `src/Dockerfile`.'
    required: false
    deprecationMessage: |
      Please use `project-file` instead, which is a drop-in replacement. `dockerfile` will be removed in the future.
  project-file:
    description: |
      Path to a `.csproj`-file for .NET, a `go.mod` file for Go or a Dockerfile for any other project.
      E.g. `applications/my-app/my-app.csproj`, `pkg/my-app/go.mod` or `src/Dockerfile`.
      If you require files outside the directory of the `project-file` to build your application, you will need to set `docker-build-context`.
    required: false
  go-main-package-dir:
    description: |
      Where the main package directory for Go projects is located, e.g. `./cmd/my-app`.
      Defaults to `./cmd/inputs.name`.
    required: false
  docker-build-context:
    description: |
      Docker build context, which is the working directory needed to build the Docker image.
      This is relative to the root of the repository.
      Defaults to the directory of `project-file`.
    required: false
  docker-cache-tag:
    description: |
      Tag used for getting build cache from registry.
      This tag is also pushed on every build, together with `github.sha-github.run_number`.
      This action will not push a `latest` tag; if you want a `latest` tag, you can use this input or `docker-additional-tags`.
    default: 'latest-cache'
  docker-additional-tags:
    description: 'Comma-separated list of additional tags to add to the image.'
    required: false
  docker-include-files:
    description: 'Comma-separated list of files to copy into the Docker image.'
    required: false
  docker-include-dirs:
    description: 'Comma-separated list of directories to copy into the Docker image.'
    required: false
  severity:
    description: |
      Severity levels to scan for.
      See [Trivy documentation](https://github.com/aquasecurity/trivy-action?tab=readme-ov-file#inputs) for more information.
    required: false
    default: 'CRITICAL'
  trivy-cve-ignores:
    description: |
      Comma-separated list of CVEs for Trivy to ignore.
      See [Trivy documentation](https://aquasecurity.github.io/trivy/v0.49/docs/configuration/filtering/#trivyignore) for syntax.
    required: false
  trivy-upload-report:
    description: |
      If `true`, the action will upload Trivy scan results to GitHub Advanced Security.
      This actions requires GitHub Advanced Security to be enabled for the repository, and the permissions `actions: read` and `security-events: write` to be set for the job.
    required: false
    default: 'false'
  trivy-post-comment:
    description: |
      If `true`, the action will post a comment to the PR with the Trivy scan results.
      The comment will only be posted if the action is ran on a pull request.
      This action requires the permission `pull-requests: write` to be set for the job.
    required: false
    default: 'false'
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  registry:
    description: |
      What container registry to use, we support Azure Container Registry (ACR), Google Container Registry (GCR) and GitHub Container Registry (GHCR).
      You should set this to the URL of the registry you want to use, e.g. `ghcr.io/3lvia` or `myregistry.azurecr.io`.
      The action will authenticate with the registry depending on the value of the URL, i.e. if the URL contains `azurecr.io`, `gcr.io` or `ghcr.io`.

      If set to an ACR registry, Elvia's private Azure Container Registry will be used by default.
      You can also set these explictly to point to your own ACR.
      Using ACR requires the permissions `id-token: write` to access the registry using OIDC.

      If set to a GCR registry, the action will use the Google Container Registry of the Google Cloud project.
      Using GCR requires the permissions `id-token: write` to access the registry using OIDC.

      If set to a GHCR registry, the action will push to the GitHub Container Registry of the repository.
      Using GHCR requires the `packages: write` permission to push to the registry.
    required: false
  AZURE_TENANT_ID:
    description: 'Tenant ID of the Azure Container Registry to push to. Only required if using your own ACR.'
    required: false
  AZURE_CLIENT_ID:
    description: 'Client ID of a service principal that can push to Azure Container Registry.'
    required: false
  ACR_NAME:
    description: 'Name of the Azure Container Registry to push to. Only required if using your own ACR.'
    required: false
  GC_PROJECT_ID:
    description: 'Project ID of the Google Cloud project to push to. Only required if using GCR.'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Get federated token for Azure
      shell: bash
      id: get-federated-token
      if: ${{ contains(inputs.registry, 'azurecr.io') || inputs.registry == '' }}
      run: |
        # Get federated token for Azure
        token=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        echo "::add-mask::$token"
        echo "token=$token" >> "$GITHUB_OUTPUT"

    - name: Login to GHCR
      if: ${{ contains(inputs.registry, 'ghcr.io') }}
      uses: docker/login-action@v3
      with:
        registry: 'ghcr.io'
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Setup Trivy ignore file
      shell: bash
      run: |
        # Setup Trivy ignore file
        touch .trivyignore

        if [ -z '${{ inputs.trivy-cve-ignores }}' ]; then
          echo "No CVEs to ignore."
          exit 0
        fi

        echo 'Ignoring CVEs: ${{ inputs.trivy-cve-ignores }}'
        for TRIVY_CVE in "$(echo ${{ inputs.trivy-cve-ignores }} | sed 's/,/ /g')"; do
          echo "$TRIVY_CVE" >> .trivyignore
        done

    - name: Install Trivy if not using Elvia runner
      if: ${{ !startsWith(runner.name, 'elvia-runner-') }}
      shell: bash
      run: |
        # Install Trivy if not using Elvia runner
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Install 3lv CLI
      uses: 3lvia/cli/setup@trunk
      with:
        version: '0.13.1' # TODO: remove this (which will get latest version) when 3lv CLI is stable

    - name: Handle deprecated inputs
      shell: bash
      run: |
        if [[ '${{ inputs.project-file }}' == '' ]]; then
          if [[ '${{ inputs.csproj-file }}' != '' ]]; then
            echo "Input 'csproj-file' is deprecated. Please use 'project-file' instead."
            echo 'PROJECT_FILE=${{ inputs.csproj-file }}' >> "$GITHUB_ENV"
          fi
          if [[ '${{ inputs.dockerfile }}' != '' ]]; then
            echo "Input 'dockerfile' is deprecated. Please use 'project-file' instead."
            echo 'PROJECT_FILE=${{ inputs.dockerfile }}' >> "$GITHUB_ENV"
          fi
        else
          echo 'PROJECT_FILE=${{ inputs.project-file }}' >> "$GITHUB_ENV"
        fi

    - name: Build with 3lv
      shell: bash
      run: |
        3lv build \
          --project-file "$PROJECT_FILE" \
          --scan-formats table,sarif,markdown \
          --additional-tags "$ADDITIONAL_TAGS" \
          --push \
          '${{ inputs.name }}'
      env:
        ADDITIONAL_TAGS: "${{ github.sha }}-${{ github.run_number }}${{ inputs.docker-additional-tags == '' && '' || ',' }}${{ inputs.docker-additional-tags }}"
        # Pass optional inputs as environment variables, since they can be empty.
        # The CLI does not accept empty strings passed to the flags, e.g. `--go-main-package-dir ''` will cause an error.
        3LV_SYSTEM_NAME: ${{ inputs.namespace }}
        3LV_REGISTRY: ${{ inputs.registry }}
        3LV_BUILD_CONTEXT: ${{ inputs.docker-build-context }}
        3LV_GO_MAIN_PACKAGE_DIR: ${{ inputs.go-main-package-dir }}
        3LV_CACHE_TAG: ${{ inputs.docker-cache-tag }}
        3LV_INCLUDE_FILES: ${{ inputs.docker-include-files }}
        3LV_INCLUDE_DIRS: ${{ inputs.docker-include-dirs }}
        3LV_SEVERITY: ${{ inputs.severity }}
        3LV_AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
        3LV_AZURE_CLIENT_ID: ${{ inputs.AZURE_CLIENT_ID }}
        3LV_AZURE_FEDERATED_TOKEN: ${{ steps.get-federated-token.outputs.token }}

    - name: Upload Trivy scan results to GitHub Advanced Security
      if: ${{ inputs.trivy-upload-report == 'true' && !cancelled() }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy.sarif'
        category: 'Trivy'

    - name: Add comment for Trivy scan results to PR
      if: ${{ github.event_name == 'pull_request' && inputs.trivy-post-comment == 'true' && !cancelled() }}
      uses: actions/github-script@v7
      env:
        APPLICATION_NAME: ${{ inputs.name }}
      with:
        script: |
          const fs = require('fs');

          const body = (() => {
              const fileContents = fs.readFileSync('trivy.md', 'utf8');
              const footer = '\n\n\n (comment too long, see action output)...';
              const MAX_COMMENT_LENGTH = 65536;

              if (fileContents.length > MAX_COMMENT_LENGTH) {
                 return fileContents.slice(0, MAX_COMMENT_LENGTH - footer.length) + footer;
              }

              return fileContents;
          })();

          const identifyingHeader = `<!-- ${process.env.APPLICATION_NAME} -->\n`;

          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(
            (comment) =>
              comment.user.type === "Bot" &&
              comment.body.includes(identifyingHeader)
          );

          if (existingComment && body) {
            await github.rest.issues.updateComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: identifyingHeader + body,
            });
            return;
          }

          if (existingComment && !body) {
            await github.rest.issues.deleteComment({
              comment_id: existingComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            return;
          }

          if (body) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: identifyingHeader + body,
            });
          }
