name: Deploy to kubernetes
description: "Deploys an application to Kubernetes using the Elvia Helm chart"

inputs:
  name:
    description: "Name of application. Do not include namespace."
    required: true
  namespace:
    description: "Namespace or system of the application."
    required: true
  environment:
    description: "Environment to deploy to. Must be from dev, test or prod"
    required: true
  AZURE_CLIENT_ID:
    description: "ClientId of a service principal that can deploy to AKS."
    required: false
    default: ""
  AZURE_TENANT_ID:
    description: "TenantId of a service principal that can deploy to AKS."
    required: false
    default: ""
  AKS_SUBSCRIPTION_ID:
    description: "Subscription ID of AKS to deploy to."
    required: false
    default: ""
  AKS_CLUSTER_NAME:
    description: "Subscription ID of AKS to deploy to."
    required: false
    default: ""
  AKS_RESOURCE_GROUP:
    description: "Subscription ID of AKS to deploy to."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Parse input
      shell: bash
      run: |
        echo "IMAGE_TAG=${{ github.sha }}-${{ github.run_number }}" >> "$GITHUB_ENV"
        if [ -z "${{ inputs.AZURE_CLIENT_ID}}" ]
        then
          echo "AZURE_CLIENT_ID=${{ vars.AZURE_CLIENT_ID}}" >> "$GITHUB_ENV"
        else
          echo "AZURE_CLIENT_ID=${{ inputs.AZURE_CLIENT_ID}}" >> "$GITHUB_ENV"
        fi
        if [ -z "${{ inputs.AZURE_TENANT_ID}}" ]
        then
          echo "AZURE_TENANT_ID=${{ vars.AZURE_TENANT_ID}}" >> "$GITHUB_ENV"
        else
          echo "AZURE_TENANT_ID=${{ inputs.AZURE_TENANT_ID}}" >> "$GITHUB_ENV"
        fi
        if [ -z "${{ inputs.AKS_SUBSCRIPTION_ID}}" ]
        then
          echo "AKS_SUBSCRIPTION_ID=${{ vars.AKS_SUBSCRIPTION_ID}}" >> "$GITHUB_ENV"
        else
          echo "AKS_SUBSCRIPTION_ID=${{ inputs.AKS_SUBSCRIPTION_ID}}" >> "$GITHUB_ENV"
        fi
        if [ -z "${{ inputs.AKS_CLUSTER_NAME}}" ]
        then
          echo "AKS_CLUSTER_NAME=${{ vars.AKS_CLUSTER_NAME}}" >> "$GITHUB_ENV"
        else
          echo "AKS_CLUSTER_NAME=${{ inputs.AKS_CLUSTER_NAME}}" >> "$GITHUB_ENV"
        fi
        if [ -z "${{ inputs.AKS_RESOURCE_GROUP}}" ]
        then
          echo "AKS_RESOURCE_GROUP=${{ vars.AKS_RESOURCE_GROUP}}" >> "$GITHUB_ENV"
        else
          echo "AKS_RESOURCE_GROUP=${{ inputs.AKS_RESOURCE_GROUP}}" >> "$GITHUB_ENV"
        fi

    - name: authenticate with Azure
      uses: azure/login@v1
      with:
        client-id: ${{ env.AZURE_CLIENT_ID}}
        tenant-id: ${{ env.AZURE_TENANT_ID}}
        subscription-id: ${{ env.AKS_SUBSCRIPTION_ID}}

    - name: setup kubelogin
      uses: azure/use-kubelogin@v1
      with:
        kubelogin-version: "v0.0.24"

    - name: set AKS context
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        admin: "false"
        use-kubelogin: "true"
        subscription: ${{ env.AKS_SUBSCRIPTION_ID }}

    - name: helm deploy
      shell: bash
      run: |
        helm repo add elvia-charts https://raw.githubusercontent.com/3lvia/kubernetes-charts/master
        helm repo update
        repo="${GITHUB_REPOSITORY##*/}"
        echo "$repo"
        helm upgrade --debug --install -n ${{ inputs.namespace}} -f CI/values.yaml ${{ inputs.name}} elvia-charts/elvia-deployment \
          --set environment=dev --set image.tag=${{ env.IMAGE_TAG }} --set labels.repositoryName=$repo --set labels.commitHash=${{ github.sha }}

    - name: rollout status
      shell: bash
      run: |
        kubectl -n ${{ inputs.namespace}} rollout status deploy ${{ inputs.name}}

    - name: get events
      shell: bash
      if: always()
      continue-on-error: true
      run: |
        kubectl -n ${{ inputs.namespace}} get events --sort-by='.lastTimestamp' |grep ${{ inputs.name}} || true

    - name: Read secrets from vault
      uses: hashicorp/vault-action@v2
      if: always()
      with:
        url: https://vault.dev-elvia.io/
        role: jwt-github-${{ inputs.namespace }}
        method: jwt
        path: jwt-github
        secrets: |
          monitoring/kv/data/shared grafana_api_url        | GRAFANA_URL ;
          monitoring/kv/data/shared grafana_editor_api_key | GRAFANA_API_KEY
    - name: Output
      shell: bash
      if: always()
      run: |
        echo ${{ env.GRAFANA_URL }}
