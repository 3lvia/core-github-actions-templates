name: 'Deploy'
description: |
  Deploys an application to Kubernetes using the Elvia Helm chart.
  This action is a wrapper around the [3lv CLI](https://github.com/3lvia/cli) deploy command (`3lv deploy`).
  To use the `Build` and `Deploy` actions with Elvias container registry and runtime services,
  you must first add your Github repository to [github-repositories-terraform](https://github.com/3lvia/github-repositories-terraform).
inputs:
  name:
    description: 'Name of application. Do not include namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application.'
    required: true
  environment:
    description: 'Environment to deploy to.'
    required: true
  helm-values-path:
    description: 'Path to Helm values file, relative to the root of the repository.'
    required: false
    default: '.github/deploy/values.yml'
  workload-type:
    description: 'The type of workload to deploy to kubernetes. Must be `deployment` or `statefulset`.'
    required: false
    default: 'deployment'
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  runtime-cloud-provider:
    description: 'Kubernetes cloud provider to deploy to: `AKS` or `GKE`.'
    required: false
    default: 'AKS'
  slack-channel:
    description: 'Slack channel to notify on failure. Leave empty to disable notifications.'
    required: false
    default: ''
  AZURE_CLIENT_ID:
    description: 'Client ID of a service principal that has access to AKS. Only required for deploying to AKS.'
    required: false
  AZURE_TENANT_ID:
    description: 'Tenant ID of AKS to deploy to. Defaults to Elvias normal clusters.'
    required: false
  AKS_SUBSCRIPTION_ID:
    description: 'Subscription ID of AKS to deploy to. Defaults to Elvias normal clusters.'
    required: false
  AKS_CLUSTER_NAME:
    description: 'Name of the AKS cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  AKS_RESOURCE_GROUP:
    description: 'Resource group of the AKS cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_SERVICE_ACCOUNT:
    description: 'Service account to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GC_WORKLOAD_IDENTITY_PROVIDER:
    description: 'Workload identity provider to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GKE_PROJECT_ID:
    description: 'Project ID of GKE to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GKE_CLUSTER_NAME:
    description: 'Name of the GKE cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GKE_CLUSTER_LOCATION:
    description: 'Location of the GKE cluster to deploy to.'
    required: false
    default: 'europe-west1'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Resolve Vault address and short repository name
      shell: bash
      run: |
        if [[ '${{ inputs.environment }}' == 'dev' || '${{ inputs.environment }}' == 'sandbox' ]]; then
          echo 'VAULT_ADDR=https://vault.dev-elvia.io' >> "$GITHUB_ENV"
        elif [[ '${{ inputs.environment }}' == 'test' ]]; then
          echo 'VAULT_ADDR=https://vault.test-elvia.io' >> "$GITHUB_ENV"
        elif [[ '${{ inputs.environment }}' == 'prod' ]]; then
          echo 'VAULT_ADDR=https://vault.elvia.io' >> "$GITHUB_ENV"
        else
          echo 'Unsupported environment: ${{ inputs.environment }}'
          exit 1
        fi

        echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_ENV"

    - name: Get federated token for Azure
      shell: bash
      id: get-federated-token
      if: ${{ inputs.runtime-cloud-provider == 'AKS' }}
      run: |
        # Get federated token for Azure
        token=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        echo "::add-mask::$token"
        echo "token=$token" >> "$GITHUB_OUTPUT"

    - name: Setup kubelogin if not on Elvia runner
      uses: azure/use-kubelogin@v1
      if: ${{ inputs.runtime-cloud-provider == 'AKS' && !startsWith(runner.name, 'elvia-runner-') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        kubelogin-version: 'latest'

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2.1.6
      if: ${{ inputs.runtime-cloud-provider == 'GKE' }}
      with:
        workload_identity_provider: ${{ inputs.GC_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GC_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI with GKE auth plugin if not on Elvia runner
      uses: google-github-actions/setup-gcloud@v2.1.1
      if: ${{ inputs.runtime-cloud-provider == 'GKE' && !startsWith(runner.name, 'elvia-runner-') }}
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Read Grafana secrets from Vault
      uses: hashicorp/vault-action@v3
      with:
        url: ${{ env.VAULT_ADDR }}
        role: 'jwt-github-${{ inputs.namespace }}-${{ env.REPO_SHORT_NAME }}'
        method: 'jwt'
        path: 'jwt-github'
        secrets: |
          monitoring/kv/data/shared grafana_api_url        | GRAFANA_URL ;
          monitoring/kv/data/shared grafana_editor_api_key | GRAFANA_API_KEY
        exportToken: 'true'

    - name: Install 3lv CLI
      uses: 3lvia/cli/setup@trunk
      with:
        version: '0.13.1' # TODO: remove this (which will get latest version) when 3lv CLI is stable

    - name: Deploy
      shell: bash
      run: |
        3lv deploy \
          --system-name '${{ inputs.namespace }}' \
          --helm-values-file '${{ inputs.helm-values-path }}' \
          --environment '${{ inputs.environment }}' \
          --workload-type '${{ inputs.workload-type }}' \
          --runtime-cloud-provider '${{ inputs.runtime-cloud-provider }}' \
          --image-tag '${{ github.sha }}-${{ github.run_number }}' \
          --add-deployment-annotation \
          --grafana-url "$GRAFANA_URL" \
          --grafana-api-key "$GRAFANA_API_KEY" \
          --run-id '${{ github.run_id }}' \
          '${{ inputs.name }}'
      env:
        3LV_AZURE_TENANT_ID: ${{ inputs.AZURE_TENANT_ID }}
        3LV_AZURE_CLIENT_ID: ${{ inputs.AZURE_CLIENT_ID }}
        3LV_AZURE_FEDERATED_TOKEN: ${{ steps.get-federated-token.outputs.token }}
        3LV_AKS_SUBSCRIPTION_ID: ${{ inputs.AKS_SUBSCRIPTION_ID }}
        3LV_AKS_RESOURCE_GROUP: ${{ inputs.AKS_RESOURCE_GROUP }}
        3LV_AKS_CLUSTER_NAME: ${{ inputs.AKS_CLUSTER_NAME }}
        3LV_GKE_PROJECT_ID: ${{ inputs.GKE_PROJECT_ID }}
        3LV_GKE_CLUSTER_NAME: ${{ inputs.GKE_CLUSTER_NAME }}
        3LV_GKE_CLUSTER_LOCATION: ${{ inputs.GKE_CLUSTER_LOCATION }}

    - name: Notify Slack on failure
      if: ${{ failure() && inputs.slack-channel != '' }}
      uses: ./slack-message
      with:
        namespace: ${{ inputs.namespace }}
        environment: ${{ inputs.environment }}
        slack-channel: ${{ inputs.slack-channel }}
        message: |
          :warning: ${{ github.repository }} - ${{ github.ref_name }} feilet. Se https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} for detaljer.
