name: 'Deploy'
description: 'Deploys an application to Kubernetes using the Elvia Helm chart. To use the `Build` and `Deploy` actions, you must first add your Github repository to https://github.com/3lvia/github-repositories-terraform.'
inputs:
  name:
    description: 'Name of application. Do not include namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application.'
    required: true
  environment:
    description: 'Environment to deploy to.'
    required: true
  helm-values-path:
    description: 'Path to Helm values file, relative to the root of the repository. Defaults to .github/deploy/values.yaml.'
    required: false
    default: '.github/deploy/values.yaml'
  workload-type:
    description: "The type of workload to deploy to kubernetes. Must be 'deployment' or 'statefulset'."
    required: false
    default: 'deployment'
  checkout:
    description: 'If "true", the action will check out the repository. If "false", the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  runtime-cloud-provider:
    description: "Kubernetes cloud provider to deploy to: 'AKS' or 'GKE'."
    required: false
    default: 'AKS'
  AZURE_CLIENT_ID:
    description: 'Client ID of a service principal that has access to AKS. Only required for deploying to AKS.'
    required: false
  AZURE_TENANT_ID:
    description: 'Tenant ID of a service principal that has access to AKS.'
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  AKS_SUBSCRIPTION_ID:
    description: 'Subscription ID of AKS to deploy to. Defaults to Elvias normal clusters.'
    required: false
  AKS_CLUSTER_NAME:
    description: 'Name of the AKS cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  AKS_RESOURCE_GROUP:
    description: 'Resource group of the AKS cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_SERVICE_ACCOUNT:
    description: 'Service account to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GC_WORKLOAD_IDENTITY_PROVIDER:
    description: 'Workload identity provider to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GC_PROJECT_ID:
    description: 'Project ID of GKE to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_CLUSTER_NAME:
    description: 'Name of the GKE cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_CLUSTER_LOCATION:
    description: 'Location of the GKE cluster to deploy to.'
    required: false
    default: 'europe-west1'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Parse input and set environment variables
      shell: bash
      run: |
        # Parse input and set environment variables
        if [[ -z "${{ inputs.environment }}" ]]; then
          echo "This action can only be used with an environment."
        fi

        if [[ -z "${{ inputs.AZURE_CLIENT_ID }}" && "${{ inputs.cloudProvider }}" == "AKS" ]]; then
          echo "AZURE_CLIENT_ID is required for AKS deployment."
          exit 1
        fi

        if [[ "${{ inputs.runtime-cloud-provider }}" == "GKE" ]]; then
          if [ -z "${{ inputs.GC_SERVICE_ACCOUNT }}" ]; then
            echo "GC_SERVICE_ACCOUNT is required for GKE deployment."
            exit 1
          fi
          if [[ -z "${{ inputs.GC_WORKLOAD_IDENTITY_PROVIDER }}" ]]; then
            echo "GC_WORKLOAD_IDENTITY_PROVIDER is required for GKE deployment."
            exit 1
          fi
        fi

        if [[ "${{ inputs.environment }}" == "dev" ]]; then
          aks_sub_id="ceb9518c-528f-4c91-9b5a-c051d383e7a8"
          echo "VAULT_ADDR=https://vault.dev-elvia.io" >> "$GITHUB_ENV"
        elif [[ "${{ inputs.environment }}" == "test" ]]; then
          aks_sub_id="ceb9518c-528f-4c91-9b5a-c051d383e7a8"
          echo "VAULT_ADDR=https://vault.test-elvia.io" >> "$GITHUB_ENV"
        elif [[ "${{ inputs.environment }}" == "prod" ]]; then
          aks_sub_id="9edbf217-b7c1-4f6a-ae76-d046cf932ff0"
          echo "VAULT_ADDR=https://vault.elvia.io" >> "$GITHUB_ENV"
        else
          echo "Unsupported environment: ${{ inputs.environment }}"
          exit 1
        fi

        aks_rg="RUNTIMESERVICE-RG${{ inputs.environment }}"
        aks_cluster_name="akscluster${{ inputs.environment }}"
        gc_project_id="elvia-runtimeservice-${{ inputs.environment }}"
        gc_cluster_name="runtimeservice-gke-${{ inputs.environment }}"

        if [[ -z "${{ inputs.AKS_SUBSCRIPTION_ID }}" ]]; then
          echo "AKS_SUBSCRIPTION_ID=$aks_sub_id" >> "$GITHUB_ENV"
        else
          echo "AKS_SUBSCRIPTION_ID=${{ inputs.AKS_SUBSCRIPTION_ID }}" >> "$GITHUB_ENV"
        fi

        if [[ -z "${{ inputs.AKS_CLUSTER_NAME }}" ]]; then
          echo "AKS_CLUSTER_NAME=$aks_cluster_name" >> "$GITHUB_ENV"
        else
          echo "AKS_CLUSTER_NAME=${{ inputs.AKS_CLUSTER_NAME }}" >> "$GITHUB_ENV"
        fi

        if [[ -z "${{ inputs.AKS_RESOURCE_GROUP }}" ]]; then
          echo "AKS_RESOURCE_GROUP=$aks_rg" >> "$GITHUB_ENV"
        else
          echo "AKS_RESOURCE_GROUP=${{ inputs.AKS_RESOURCE_GROUP }}" >> "$GITHUB_ENV"
        fi

        if [[ -z "${{ inputs.GC_PROJECT_ID }}" ]]; then
          echo "GC_PROJECT_ID=$gc_project_id" >> "$GITHUB_ENV"
        else
          echo "GC_PROJECT_ID=${{ inputs.GC_PROJECT_ID }}" >> "$GITHUB_ENV"
        fi

        if [[ -z "${{ inputs.GC_CLUSTER_NAME }}" ]]; then
          echo "GC_CLUSTER_NAME=$gc_cluster_name" >> "$GITHUB_ENV"
        else
          echo "GC_CLUSTER_NAME=${{ inputs.GC_CLUSTER_NAME }}" >> "$GITHUB_ENV"
        fi

        if [[ -z "${{ inputs.GC_CLUSTER_LOCATION }}" ]]; then
          echo "GC_CLUSTER_LOCATION=europe-west1" >> "$GITHUB_ENV"
        else
          echo "GC_CLUSTER_LOCATION=${{ inputs.GC_CLUSTER_LOCATION }}" >> "$GITHUB_ENV"
        fi

        echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_ENV"

    - name: Setup Python for Grafana script
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Authenticate with Azure
      uses: azure/login@v2
      if: ${{ inputs.runtime-cloud-provider == 'AKS' }}
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AKS_SUBSCRIPTION_ID }}

    - name: Setup kubelogin
      uses: azure/use-kubelogin@v1
      if: ${{ inputs.runtime-cloud-provider == 'AKS' }}
      with:
        kubelogin-version: 'v0.0.24'

    - name: Set AKS context
      uses: azure/aks-set-context@v4
      if: ${{ inputs.runtime-cloud-provider == 'AKS' }}
      with:
        cluster-name: ${{ env.AKS_CLUSTER_NAME }}
        resource-group: ${{ env.AKS_RESOURCE_GROUP }}
        admin: 'false'
        use-kubelogin: 'true'
        subscription: ${{ env.AKS_SUBSCRIPTION_ID }}

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2.1.2
      if: ${{ inputs.runtime-cloud-provider == 'GKE' }}
      with:
        workload_identity_provider: ${{ inputs.GC_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GC_SERVICE_ACCOUNT }}

    - name: Connect to GKE
      uses: google-github-actions/get-gke-credentials@v2.1.0
      if: ${{ inputs.runtime-cloud-provider == 'GKE' }}
      with:
        cluster_name: ${{ env.GC_CLUSTER_NAME }}
        location: ${{ env.GC_CLUSTER_LOCATION }}
        project_id: ${{ env.GC_PROJECT_ID }}

    - name: Helm deploy
      shell: bash
      run: |
        # Helm deploy
        helm repo add elvia-charts https://raw.githubusercontent.com/3lvia/kubernetes-charts/master
        helm repo update
        if [[ "${{ inputs.workload-type }}" == "deployment" ]]; then
          helm upgrade --debug --install \
            -n ${{ inputs.namespace }} \
            -f ${{ inputs.helm-values-path }} ${{ inputs.name }} elvia-charts/elvia-deployment \
            --set="environment=${{ inputs.environment }}" \
            --set="image.tag=${{ github.sha }}-${{ github.run_number }}" \
            --set="labels.repositoryName=${{ env.REPO_SHORT_NAME }}" \
            --set="labels.commitHash=${{ github.sha }}"
        elif [[ "${{ inputs.workload-type }}" == "statefulset" ]]; then
          helm upgrade --debug --install \
            -n ${{ inputs.namespace }} \
            -f ${{ inputs.helm-values-path }} ${{ inputs.name }} elvia-charts/elvia-statefulset \
            --set="environment=${{ inputs.environment }}" \
            --set="image.tag=${{ github.sha }}-${{ github.run_number }}" \
            --set="labels.repositoryName=${{ env.REPO_SHORT_NAME }}" \
            --set="labels.commitHash=${{ github.sha }}"
        else
          echo "Unsupported inputs.workload-type: ${{ inputs.workload-type }}"
          exit 1
        fi

    - name: Show Kubernetes deployment rollout status
      shell: bash
      run: |
        # Show Kubernetes deployment rollout status
        if [[ "${{ inputs.workload-type }}" == "deployment" ]]; then
          kubectl -n ${{ inputs.namespace }} rollout status deployment ${{ inputs.name }}
        elif [[ "${{ inputs.workload-type }}" == "statefulset" ]]; then
          kubectl -n ${{ inputs.namespace }} rollout status statefulset ${{ inputs.name }}
        else
          echo "Unsupported inputs.workload-type: ${{ inputs.workload-type }}"
          exit 1
        fi

    - name: Get Kubernetes events
      shell: bash
      if: always()
      continue-on-error: true
      run: |
        # Get Kubernetes events
        kubectl -n ${{ inputs.namespace }} get events --sort-by='.lastTimestamp' | grep ${{ inputs.name }} || true

    - name: Read secrets from Vault
      uses: hashicorp/vault-action@v3
      if: always()
      with:
        url: ${{ env.VAULT_ADDR }}
        role: jwt-github-${{ inputs.namespace }}-${{ env.REPO_SHORT_NAME }}
        method: jwt
        path: jwt-github
        secrets: |
          monitoring/kv/data/shared grafana_api_url        | GRAFANA_URL ;
          monitoring/kv/data/shared grafana_editor_api_key | GRAFANA_API_KEY

    - name: Add deploy annotation to Grafana Cloud
      shell: bash
      if: always()
      run: |
        # Add deploy annotiation to Grafana Cloud
        git_message="$(git log -1 --no-merges --pretty=%B)"
        python3 ${{ github.action_path }}/post-grafana-annotations.py \
          --what 'Deploy ${{ job.status }} - ' \
          --data "$GITHUB_RUN_ID $git_message <a href="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID">Link</a>" \
          --tags '{app: ${{ inputs.name }}, system: ${{ inputs.namespace }}, env: ${{ inputs.environment }}, event: deploy}' \
          --grafana_url "$GRAFANA_URL" \
          --grafana_api_key "$GRAFANA_API_KEY"
