name: 'Deploy'
description: |
  Deploys an application to Kubernetes using the Elvia Helm chart.
  This action is a wrapper around the [3lv CLI](https://github.com/3lvia/cli) deploy command (`3lv deploy`).
  To use the `Build` and `Deploy` actions with Elvias container registry and runtime services,
  you must first add your Github repository to [github-repositories-terraform](https://github.com/3lvia/github-repositories-terraform).
inputs:
  name:
    description: 'Name of application. Do not include namespace.'
    required: true
  namespace:
    description: 'Namespace or system of the application.'
    required: true
  environment:
    description: 'Environment to deploy to.'
    required: true
  helm-values-path:
    description: 'Path to Helm values file, relative to the root of the repository.'
    required: false
    default: '.github/deploy/values.yml'
  workload-type:
    description: 'The type of workload to deploy to kubernetes. Must be `deployment` or `statefulset`.'
    required: false
    default: 'deployment'
  checkout:
    description: 'If `true`, the action will check out the repository. If `false`, the action will assume the repository has already been checked out.'
    required: false
    default: 'true'
  runtime-cloud-provider:
    description: 'Kubernetes cloud provider to deploy to: `AKS` or `GKE`.'
    required: false
    default: 'AKS'
  slack-channel:
    description: 'Slack channel to notify on failure. Leave empty to disable notifications.'
    required: false
    default: ''
  AZURE_CLIENT_ID:
    description: 'Client ID of a service principal that has access to AKS. Only required for deploying to AKS.'
    required: false
  AZURE_TENANT_ID:
    description: 'Tenant ID of a service principal that has access to AKS.'
    required: false
    default: '2186a6ec-c227-4291-9806-d95340bf439d'
  AKS_SUBSCRIPTION_ID:
    description: 'Subscription ID of AKS to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_SERVICE_ACCOUNT:
    description: 'Service account to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GC_WORKLOAD_IDENTITY_PROVIDER:
    description: 'Workload identity provider to use for deploying to GKE. Only required for deploying to GKE.'
    required: false
  GC_PROJECT_ID:
    description: 'Project ID of GKE to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_CLUSTER_NAME:
    description: 'Name of the GKE cluster to deploy to. Defaults to Elvias normal clusters.'
    required: false
  GC_CLUSTER_LOCATION:
    description: 'Location of the GKE cluster to deploy to.'
    required: false
    default: 'europe-west1'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      if: ${{ inputs.checkout == 'true' }}
      uses: actions/checkout@v4

    - name: Setup Python for Grafana script
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache-dependency-path: '${{ github.action_path }}/requirements.txt'

    - name: Resolve subscription ID, Vault address and short repository name
      shell: bash
      run: |
        if [[ '${{ inputs.environment }}' == 'dev' ]]; then
          AKS_SUBSCRIPTION_ID='ceb9518c-528f-4c91-9b5a-c051d383e7a8'
          echo 'VAULT_ADDR=https://vault.dev-elvia.io' >> "$GITHUB_ENV"
        elif [[ '${{ inputs.environment }}' == 'test' ]]; then
          AKS_SUBSCRIPTION_ID='ceb9518c-528f-4c91-9b5a-c051d383e7a8'
          echo 'VAULT_ADDR=https://vault.test-elvia.io' >> "$GITHUB_ENV"
        elif [[ '${{ inputs.environment }}' == 'prod' ]]; then
          AKS_SUBSCRIPTION_ID="9edbf217-b7c1-4f6a-ae76-d046cf932ff0"
          echo 'VAULT_ADDR=https://vault.elvia.io' >> "$GITHUB_ENV"
        elif [[ '${{ inputs.environment }}' == 'sandbox' ]]; then
          AKS_SUBSCRIPTION_ID='ceb9518c-528f-4c91-9b5a-c051d383e7a8'
          echo 'VAULT_ADDR=https://vault.dev-elvia.io' >> "$GITHUB_ENV"
        else
          echo 'Unsupported environment: ${{ inputs.environment }}'
          exit 1
        fi

        if [[ '${{ inputs.AKS_SUBSCRIPTION_ID }}' == '' ]]; then
          echo "AKS_SUBSCRIPTION_ID=$AKS_SUBSCRIPTION_ID" >> "$GITHUB_ENV"
        else
          echo "AKS_SUBSCRIPTION_ID=${{ inputs.AKS_SUBSCRIPTION_ID }}" >> "$GITHUB_ENV"
        fi

        echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY##*/}" >> "$GITHUB_ENV"

    - name: Authenticate with Azure
      uses: azure/login@v2.2.0
      if: ${{ inputs.runtime-cloud-provider == 'AKS' }}
      env:
        AZURE_CORE_OUTPUT: 'none'
        AZURE_LOGIN_POST_CLEANUP: 'false' # we destroy VMs after use
      with:
        client-id: ${{ inputs.AZURE_CLIENT_ID }}
        tenant-id: ${{ inputs.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AKS_SUBSCRIPTION_ID }}

    - name: Setup kubelogin if not on Elvia runner
      uses: azure/use-kubelogin@v1
      if: ${{ inputs.runtime-cloud-provider == 'AKS' && !startsWith(runner.name, 'elvia-runner-') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        kubelogin-version: 'latest'

    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v2.1.4
      if: ${{ inputs.runtime-cloud-provider == 'GKE' }}
      with:
        workload_identity_provider: ${{ inputs.GC_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GC_SERVICE_ACCOUNT }}

    - name: Setup Google Cloud CLI with GKE auth plugin if not on Elvia runner
      uses: google-github-actions/setup-gcloud@v2.1.1
      if: ${{ inputs.runtime-cloud-provider == 'GKE' && !startsWith(runner.name, 'elvia-runner-') }}
      with:
        install_components: 'gke-cloud-auth-plugin'

    - name: Install 3lv CLI
      uses: 3lvia/cli/setup@trunk
      with:
        version: '0.11.13' # TODO: remove this (which will get latest version) when 3lv CLI is stable

    - name: Deploy
      shell: bash
      run: |
        3lv deploy \
          --system-name '${{ inputs.namespace }}' \
          --helm-values-file '${{ inputs.helm-values-path }}' \
          --environment '${{ inputs.environment }}' \
          --workload-type '${{ inputs.workload-type }}' \
          --runtime-cloud-provider '${{ inputs.runtime-cloud-provider }}' \
          --image-tag '${{ github.sha }}-${{ github.run_number }}' \
          --repository-name "$REPO_SHORT_NAME" \
          --commit-hash '${{ github.sha }}' \
          --skip-authentication \
          '${{ inputs.name }}'

    - name: Read secrets from Vault
      uses: hashicorp/vault-action@v3
      if: always()
      with:
        url: ${{ env.VAULT_ADDR }}
        role: 'jwt-github-${{ inputs.namespace }}-${{ env.REPO_SHORT_NAME }}'
        method: 'jwt'
        path: 'jwt-github'
        secrets: |
          monitoring/kv/data/shared grafana_api_url        | GRAFANA_URL ;
          monitoring/kv/data/shared grafana_editor_api_key | GRAFANA_API_KEY
        exportToken: 'true'

    - name: Add deploy annotation to Grafana Cloud
      shell: bash
      if: always()
      run: |
        # Add deploy annotiation to Grafana Cloud
        git_message="$(git log -1 --no-merges --pretty=%B)"
        pip install -r '${{ github.action_path }}/requirements.txt'
        python '${{ github.action_path }}/post-grafana-annotations.py' \
          --what 'Deploy ${{ job.status }} - ' \
          --data "$GITHUB_RUN_ID $git_message <a href="https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID">Link</a>" \
          --tags '{app: ${{ inputs.name }}, system: ${{ inputs.namespace }}, env: ${{ inputs.environment }}, event: deploy}' \
          --grafana_url "$GRAFANA_URL" \
          --grafana_api_key "$GRAFANA_API_KEY"

    - name: Notify Slack on failure
      if: ${{ failure() && inputs.slack-channel != '' }}
      uses: ./slack-message
      with:
        namespace: ${{ inputs.namespace }}
        environment: ${{ inputs.environment }}
        slack-channel: ${{ inputs.slack-channel }}
        message: |
          :warning: ${{ github.repository }} - ${{ github.ref_name }} feilet. Se https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} for detaljer.
